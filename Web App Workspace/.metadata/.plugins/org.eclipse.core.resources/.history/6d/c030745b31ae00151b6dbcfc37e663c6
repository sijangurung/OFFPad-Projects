package com.offpad.demoprototype;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Reader;
import java.io.Writer;
import java.security.GeneralSecurityException;
import java.security.Key;
import java.security.KeyFactory;
import java.security.PublicKey;
import java.security.spec.X509EncodedKeySpec;

import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESKeySpec;
import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.tomcat.util.codec.binary.Base64;
/**
 * Servlet implementation class clientBrowser
 */
@WebServlet("/ClientServlet")
public class ClientServlet extends HttpServlet {
	// This would be filled from the another class which would be running in the
	// background....

	private static final long serialVersionUID = 1L;
	public static String hashReceived = "nothing", rDest = "Not_Received_Yet", rAmt = "000000";

	/**
	 * @see HttpServlet#HttpServlet()
	 */
	public ClientServlet() {
		super();
		
		// TODO Auto-generated constructor stub
		try {
			String desktop = System.getProperty("user.home") + "/Desktop/";
			Reader file = new FileReader(desktop + "offpad.txt");
			System.out.println("File reading successful!");
			BufferedReader buff = new BufferedReader(file);
			hashReceived = buff.readLine();
			buff.close();
			
		} catch (IOException e) {
			e.printStackTrace();
		}
		/*now we should decrypt it using RSA */
		/*RECEIVED IS EncryptedMessage+publickey: publicKey
		 */
		
		System.out.println("total Received:"+hashReceived);
		String[] parts = hashReceived.split("publickey:");
		String decodedMessage = parts[0]; // the message
		String decodedPublicKey = parts[1]; // the publickey
		
		// DECODE YOUR BASE64 STRING
		// REBUILD KEY USING SecretKeySpec
		
		byte[] encodedKey = Base64.getDecoder().decode(decodedPublicKey);
		SecretKey originalKey = new SecretKeySpec(encodedKey, 0, encodedKey.length, "RSA");

		    
		
		try {
			publickey = loadPublicKey(publicKeyStr);
		} catch (GeneralSecurityException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		System.out.println("publicKey: "+publickey);
//		String decodedString = this.decrypt(decodedMessage,publicKey);
		// now decrypt it to fill in the forms auto...
		// Here is the decryption part..Sijan Gurung
		int p = 0, lo = 0;
		for (int i = 0; i < hashReceived.length(); i++) {
			if (hashReceived.charAt(i) == '+') {
				p++;
				if(p == 1){
					lo = i;
				rDest = hashReceived.substring(0, i);
				}else if (p == 2) {
					rAmt = hashReceived.substring(lo + 1, i);
					break;
				}
			}
		}
	
		
	
	}
	/**
	 * Decrypt the password
	 * @param key
	 * @param data
	 * @return
	 */
	public static String unhideCrypt(String key, String data) {
	       if (key == null || data == null)
	           return null;
	       
	       String decryptStr = null;
	       try {
	           byte[] dataBytes = Base64.decode(data, base64Mode);
	           DESKeySpec desKeySpec = new DESKeySpec(key.getBytes(charsetName));
	           SecretKeyFactory secretKeyFactory = SecretKeyFactory.getInstance(algorithm);
	           SecretKey secretKey = secretKeyFactory.generateSecret(desKeySpec);
	           Cipher cipher = Cipher.getInstance(algorithm);
	           cipher.init(Cipher.DECRYPT_MODE, secretKey);
	           byte[] dataBytesDecrypted = (cipher.doFinal(dataBytes));
	           decryptStr = new String(dataBytesDecrypted);
	       } catch (Exception e) {
	       	Log.e(TAG, e.getLocalizedMessage());
	       }
	       return decryptStr;
	   }
	
	public static String decryptPassword(String encryptedPwd) {
	    try {
	        DESKeySpec keySpec = new DESKeySpec(
	                PASSWORD_SECRET.getBytes("UTF-8"));
	        SecretKeyFactory keyFactory = SecretKeyFactory.getInstance("RSA");
	        SecretKey key = keyFactory.generateSecret(keySpec);

	        byte[] encryptedWithoutB64 = Base64.decode(encryptedPwd, Base64.DEFAULT);
	        Cipher cipher = Cipher.getInstance("DES");
	        cipher.init(Cipher.DECRYPT_MODE, key);
	        byte[] plainTextPwdBytes = cipher.doFinal(encryptedWithoutB64);
	        return new String(plainTextPwdBytes);
	    } catch (Exception e) {
	    }
	    return encryptedPwd;
	}
	 
	
	private byte[] decrypt (byte[] inputBytes, PublicKey key) throws Exception{
		Cipher cipher = Cipher.getInstance("RSA");
		cipher.init(Cipher.DECRYPT_MODE, key);
		return cipher.doFinal(inputBytes);
	}
	public static PublicKey loadPublicKey(String stored) throws GeneralSecurityException {
		byte[] publicBytes = Base64.decodeBase64(stored);
		X509EncodedKeySpec keySpec = new X509EncodedKeySpec(publicBytes);
		KeyFactory keyFactory = KeyFactory.getInstance("RSA");
		PublicKey pubKey = keyFactory.generatePublic(keySpec);
		return pubKey;
	}

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse
	 *      response)
	 */
	@Override
	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		// TODO Auto-generated method stub
		/*
		 * // we do not set content type, headers, cookies etc. //
		 * resp.setContentType("text/html"); // while redirecting as // it would
		 * most likely result in an IllegalStateException
		 * 
		 * // "/" is relative to the context root (your web-app name)
		 * RequestDispatcher view =
		 * request.getRequestDispatcher("/WEB-INF/html/index.html"); // don't
		 * add your web-app name to the path
		 * 
		 * view.forward(request, response);
		 */
		// Set response content type
		performTask(request, response); // This method reloads this page once in
										// 15 seconds....
		response.setContentType("text/html");

		request.setAttribute("rDest", rDest);
		request.setAttribute("rAmt", rAmt);
		request.setAttribute("hashReceived", hashReceived);

		RequestDispatcher view = request.getRequestDispatcher("index.jsp");
		view.forward(request, response);

	}

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse
	 *      response)
	 */
	@Override
	protected void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		// TODO Auto-generated method stub
		// After this page is done... remove the values
		// This is for writing dummy values...after wards...
		String desktop = System.getProperty("user.home") + "/Desktop/";
		BufferedWriter writer = null;
		Writer write_file = new FileWriter(desktop + "offpad.txt");
		writer = new BufferedWriter(write_file);
		writer.write("Not_Received_Yet+000000+testing...");
		writer.close();
	}

	private void performTask(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		response.setContentType("text/html");
		response.addHeader("Refresh", "60");
		new ClientServlet();
	}

}
